# macro_harvester.py
# –í–µ—Ä—Å–∏—è: 1.4 (–ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç requests.Session –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤)

import logging
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

import pandas as pd
import yfinance as yf
import numpy as np
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é requests –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
def get_requests_session() -> requests.Session:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é requests —Å User-Agent –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–º retry.
    """
    session = requests.Session()
    # –ú–∞—Å–∫–∏—Ä—É–µ–º—Å—è –ø–æ–¥ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
    session.headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—Å–µ—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    retries = Retry(total=3, backoff_factor=1, status_forcelist=[429, 500, 502, 503, 504])
    adapter = HTTPAdapter(max_retries=retries)
    session.mount('https://', adapter)
    session.mount('http://', adapter)
    
    return session

def get_yf_history(ticker: str, session: requests.Session, full_fetch: bool = False) -> Optional[pd.DataFrame]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å Yahoo Finance.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é requests –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.

    Args:
        ticker: –¢–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Yahoo Finance.
        session: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è requests.
        full_fetch: –ï—Å–ª–∏ True, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ 2 –≥–æ–¥–∞.
                    –ò–Ω–∞—á–µ, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (—Å –∑–∞–ø–∞—Å–æ–º).

    Returns:
        DataFrame —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.
    """
    logging.info(f"  - –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {ticker} (Yahoo Finance)...")

    end_date = datetime.now() + timedelta(days=1)
    if full_fetch:
        start_date = end_date - timedelta(days=365 * 2)
        period_str = "2 –≥–æ–¥–∞"
    else:
        start_date = end_date - timedelta(days=7)
        period_str = "7 –¥–Ω–µ–π"

    start_date_str = start_date.strftime('%Y-%m-%d')
    end_date_str = end_date.strftime('%Y-%m-%d')

    try:
        asset = yf.Ticker(ticker, session=session)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
        hist = asset.history(
            start=start_date_str,
            end=end_date_str,
            interval="1d",
            timeout=60
        )

        if hist.empty:
            logging.warning(f"    - ‚ö†Ô∏è –î–ª—è {ticker} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∏—Å—Ç–æ—Ä–∏—è —Å yfinance (–ø–µ—Ä–∏–æ–¥: {period_str}).")
            return None

        hist.reset_index(inplace=True)
        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –µ–¥–∏–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        hist.columns = [col.capitalize() for col in hist.columns]
        
        rename_map = {
            'Date': 'Date', 'Open': 'Open', 'High': 'High',
            'Low': 'Low', 'Close': 'Close', 'Volume': 'Volume'
        }
        hist.rename(columns=rename_map, inplace=True)

        hist['Date'] = pd.to_datetime(hist['Date']).dt.strftime('%Y-%m-%d')

        for col in ['Open', 'High', 'Low', 'Close']:
            if col in hist.columns:
                hist[col] = hist[col].apply(lambda x: float(x) if pd.notna(x) else None)
        if 'Volume' in hist.columns:
            hist['Volume'] = hist['Volume'].apply(lambda x: int(x) if pd.notna(x) else None)

        required_cols = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
        return hist[[col for col in required_cols if col in hist.columns]]

    except Exception as e:
        logging.error(f"    - ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {ticker}: {e}", exc_info=True)
        return None


def main_macro_updater(tickers_to_process: List[str], history_sheet, full_fetch: bool = False) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–∫—Ä–æ-–¥–∞–Ω–Ω—ã—Ö.
    """
    mode_str = "–ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê" if full_fetch else "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    logging.info("\n" + "="*50)
    logging.info(f"--- üåç ASIPM-AI: {mode_str} –ú–∞–∫—Ä–æ-–¥–∞–Ω–Ω—ã—Ö v1.4 (–°–≤–µ—Ä—Ö–Ω–∞–¥–µ–∂–Ω—ã–π) üåç ---")
    logging.info("="*50)

    # –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –Ω–∞ –≤–µ—Å—å –∑–∞–ø—É—Å–∫
    session = get_requests_session()

    new_history_rows: List[List[Any]] = []
    for ticker in tickers_to_process:
        df = get_yf_history(ticker, session, full_fetch=full_fetch)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
        if df is None or df.empty:
            continue

        df.sort_values(by='Date', inplace=True)
        records_to_add = df.to_dict('records')
        
        for record in records_to_add:
            new_history_rows.append([
                record.get('Date', ''), 'D1', ticker,
                record.get('Open', ''), record.get('High', ''),
                record.get('Low', ''), record.get('Close', ''),
                record.get('Volume', '')
            ])
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
        time.sleep(1)

    if new_history_rows:
        logging.info(f"\nüîÑ –ù–∞–π–¥–µ–Ω–æ {len(new_history_rows)} –Ω–æ–≤—ã—Ö –º–∞–∫—Ä–æ-–∑–∞–ø–∏—Å–µ–π. –î–æ–±–∞–≤–ª—è—é –≤ 'History_OHLCV'...")
        history_sheet.append_rows(new_history_rows, value_input_option='USER_ENTERED')
        logging.info("‚úÖ –ú–∞–∫—Ä–æ-–∏—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∞.")
    else:
        logging.info("‚úÖ –ù–æ–≤—ã—Ö –º–∞–∫—Ä–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    logging.info("--- üèÅ –†–ê–ë–û–¢–ê –ú–ê–ö–†–û-–°–ë–û–†–©–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê üèÅ ---")